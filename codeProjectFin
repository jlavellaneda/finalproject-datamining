# Encabezado --------------------------------------------------------------

# union.R
# R Versions: 3.4.4 i386
#
# Author(s): JA, SM, LW
# 
# Description: Leer datos encuentas UCI
#
# Inputs:   1. Datos de  individuos UCI
#
# Outputs:  1. An√°lisis CART, KNN, Discriminant Analysis
##
# File history:

rm(list=ls())
# options(encoding="UTF-8")

# Packages ----------------------------------------------------------------

library(dplyr) # # 0.7.2
library(openxlsx)
library(stringr)
library(tidyr)
library(purrr)
library(DiscriMiner)
library(rpart)
library(rpart.plot)
library(e1071)
library(caret)

# Definiciones globales ---------------------------------------------------

reportNum <- function(x, name) { 
  tibble(   name   = name, 
            min    = min(x,na.rm =TRUE), 
            med    = median(x,na.rm =TRUE),
            mean   = mean(x,na.rm =TRUE),
            sd     = sd(x,na.rm =TRUE),
            max    = max(x,na.rm =TRUE),
            miss   = sum(length(which(is.na(x)))) )}

reportCat <- function(x, name) { 
  tibble(   name   = name, 
            count  = count(x,na.rm =TRUE),
            miss   = sum(length(which(is.na(x)))))}


varNum <- c('age', 'trestbps', 'chol', 'thalach', 'oldpeak' )

varFactor <- c('sex','cp','fbs','restecg','exang','slope','ca','target','thal')

# Lectura datos --------------------------------------------------------------

uci.df <- read.csv("heart.csv", header = TRUE)
data.uci <- data.frame(uci.df)

# Procesamiento projecto final -----------------------------------------------

data.uci <- data.uci %>% 
  mutate_at(vars(sex,cp,fbs,restecg,exang,slope,ca,target,thal), 
            funs(as.factor))

num.datauci <- select_if(data.uci, is.numeric)
datauci_norm <- as.data.frame(apply(num.datauci, 2, function(x)
                              (x - min(x))/(max(x)-min(x))))

# Exploracion datos-----------------------------------------------------------

str(datauci_norm)
boxP <- boxplot(datauci_norm, col="darkcyan", horizontal = TRUE, las=2,
                main="Boxplot of Variables")

dataNum <- data.uci %>% 
  select(varFactor) %>% 
  imap_dfr(reportNum) %>% 
  mutate_at(vars(-name), funs(round(.,2)))

dataCat <- data.uci %>% 
  select(varNum) %>% 
  imap_dfr(reportCat) %>% 
  mutate_at(vars(-name), funs(round(.,2)))
  
cor.mat <- round(cor(datauci_norm),2) 
melted.cor.mat <- melt(cor.mat)
ggplot(melted.cor.mat, aes(x = X1, y = X2, fill = value)) + 
+     geom_tile() + 
+     geom_text(aes(x = X1, y = X2, label = value))


# CART -----------------------------------------------------------------------

# use rpart() to run a classification tree.
# define rpart.control() in rpart() to determine the depth of the tree.
class.tree <- rpart(Ownership ~ ., data = mower.df, 
                    control = rpart.control(maxdepth = 2), method = "class")
## plot tree
# use prp() to plot the tree. You can control plotting parameters such as color, shape, 
# and information displayed (which and where).
prp(class.tree, type = 1, extra = 1, split.font = 1, varlen = -10)  
###
deeper.tree <- rpart(Ownership ~ ., data = mower.df, method = "class", cp = 0, minsplit = 1)
# count number of leaves
length(deeper.tree$frame$var[deeper.tree$frame$var == "<leaf>"])
# plot tree
prp(deeper.tree, type = 1, extra = 1, under = TRUE, split.font = 1, varlen = -10, 
    box.col=ifelse(deeper.tree$frame$var == "<leaf>", 'gray', 'white'))  







# KNN ------------------------------------------------------------------------




# Discriminant Analysis --------------------------------------------------------
> my_lin1 = linDA(data.uci[,4:5], data.uci$target)
> my_lin1$confusion
> my_lin1$error_rate
> my_lin1$functions
propensity.uci <- exp(da.cla$scores[,2])/(exp(da.cla$scores[,1])+exp(da.cla$scores[,2]))
> data.frame(Actual=data.uci$target,
+            da.cla$classification, da.cla$scores, propensity.owner=propensity.uci)


# Guardar datos -----------------------------------------------------------

save(datBlock, file = 'datBlock.Rdata')

